import tiny from 'tiny-json-http';
import type { config, TinyResult, TinyOptions } from './types.js';
interface FetchOptions extends TinyOptions {
    method: keyof typeof tiny;
}
declare class August {
    #private;
    config: config;
    token: any;
    constructor(config: config);
    fetch({ method, ...params }: FetchOptions): Promise<TinyResult>;
    get(endpoint: any): Promise<TinyResult>;
    post(endpoint: any, data: any): Promise<TinyResult>;
    put(endpoint: any, data: any): Promise<TinyResult>;
    end(): void;
    authorize(): Promise<boolean>;
    validate(code: string): Promise<boolean>;
    locks(): Promise<any>;
    _locks(): Promise<any>;
    details(lockId: string): Promise<import("./types.js").AugustLockDetails[]>;
    _details(lockId: string): Promise<import("./types.js").AugustLockDetails[]>;
    status(lockId: string): Promise<any>;
    _status(lockId: string): Promise<any>;
    lock(lockId: string): Promise<import("./types.js").AugustLockStatus>;
    unlock(lockId: string): Promise<import("./types.js").AugustLockStatus>;
    subscribe(lockId: any, callback: any): Promise<() => void>;
    _subscribe(lockId: any, callback: any): Promise<() => void>;
    addSimpleProps(obj: {
        state?: any;
        lockID?: any;
        status?: any;
        doorState?: any;
        info?: any;
    }): void;
    static addSimpleProps(config: config, obj: {
        state?: any;
        lockID?: any;
        status?: any;
        doorState?: any;
        info?: any;
    }): void;
    static authorize(config: config): Promise<boolean>;
    static validate(config: config, code: string): Promise<boolean>;
    static locks(config: config): Promise<any>;
    static details(config: config, lockId: string): Promise<import("./types.js").AugustLockDetails[]>;
    static status(config: config, lockId: string): Promise<any>;
    static lock(config: config, lockId: string): Promise<import("./types.js").AugustLockStatus>;
    static unlock(config: config, lockId: string): Promise<import("./types.js").AugustLockStatus>;
    static subscribe(config: config, lockId: string, callback?: any): Promise<() => void>;
}
export default August;
